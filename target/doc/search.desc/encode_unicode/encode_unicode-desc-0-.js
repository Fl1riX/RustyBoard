searchState.loadedDescShard("encode_unicode", 0, "Miscellaneous UTF-8 and UTF-16 types and methods.\nExtension trait for <code>char</code> that adds methods for converting …\nIterator methods that convert between <code>u8</code>s and <code>Utf8Char</code> or …\nMethods for iterating over <code>u8</code> and <code>u16</code> slices as UTF-8 or …\nAdds <code>.utf8chars()</code> and <code>.utf16chars()</code> iterator constructors …\nMethods for working with <code>u16</code>s as UTF-16 units.\nMethods for working with <code>u8</code>s as UTF-8 bytes.\nAn unicode codepoint stored as UTF-16.\nAn unicode codepoint stored as UTF-8.\nReturn a <code>str</code> view of the array the codepoint is stored as.\nChecks that two characters are an ASCII case-insensitive …\nChecks that two characters are an ASCII case-insensitive …\nErrors returned by various conversion methods in this …\nHow many more bytes will you need to complete this …\nHow many more bytes will you need to complete this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>Utf8Char</code> from a byte array after validating it.\nValidate and store an UTF-16 array as returned from …\nZero-cost constructor.\nCreate an <code>Utf16Char</code> from an array as returned from …\nCreate an <code>Utf8Char</code> from a single byte.\nCreate an <code>Utf8Char</code> from a single byte without checking …\nCreate an <code>Utf16Char</code> from a single unit.\nCreate an <code>Utf16Char</code> from a single unit without checking …\nCreate an <code>Utf8Char</code> of the first codepoint in an UTF-8 …\nValidate and store the first UTF-16 codepoint in the slice.\nA <code>from_slice_start()</code> that doesn’t validate the codepoint.\nStore the first UTF-16 codepoint of the slice.\nCreate an <code>Utf8Char</code> from a string slice. The string must …\nCreate an <code>Utf16Char</code> from a string slice. The string must …\nCreate an <code>Utf8Char</code> from the first codepoint in a <code>str</code>.\nCreate an <code>Utf16Char</code> from the first codepoint in a string …\nValidate and store a UTF-16 pair as returned from …\nCreate an <code>Utf16Char</code> from a tuple as returned from …\nProduces more detailed errors than <code>char::from_u32()</code>\nConvert a UTF-16 pair as returned from <code>.to_utf16_array()</code> …\nConvert a UTF-16 array as returned from <code>.to_utf16_array()</code> …\nCreate a <code>char</code> from the start of an UTF-16 slice, and also …\nConvert a UTF-16 pair as returned from <code>.to_utf16_tuple()</code> …\nConvert a UTF-16 tuple as returned from <code>.to_utf16_tuple()</code> …\nConvert an UTF-8 sequence as returned from <code>.to_utf8_array()</code>…\nConvert an UTF-8 sequence into a char.\nCreate a <code>char</code> from the start of an UTF-8 slice, and also …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over the byte values.\nIterate over the units.\nChecks that the codepoint is an ASCII character.\nChecks that the codepoint is an ASCII character.\nChecks that the codepoint is in the basic multilingual …\nDoes this <code>u16</code> need another <code>u16</code> to complete a codepoint? …\nIterate over the one or two units in the UTF-16 …\nIterate over or read the one to four bytes in the UTF-8 …\nIterator types that you should rarely need to name\nThe number of bytes this character needs.\nThe number of units this character is made up of.\nConverts the character to its ASCII lower case equivalent …\nConverts the character to its ASCII lower case equivalent …\nConverts the character to its ASCII upper case equivalent …\nConverts the character to its ASCII upper case equivalent …\nA <code>const fn</code> alternative to the trait-based …\nA <code>const fn</code> alternative to the trait-based …\nExpose the internal array and the number of used bytes.\nGet the character represented as an array of two units.\nConverts the character to its ASCII lower case equivalent.\nConverts the character to its ASCII lower case equivalent.\nConverts the character to its ASCII upper case equivalent.\nConverts the character to its ASCII upper case equivalent.\nConverts an iterator of <code>Utf8Char</code>s or <code>&amp;Utf8Char</code>s to an …\nConvert from UTF-8 to UTF-32\nConvert from UTF-16 to UTF-32\nWrite the internal representation to a slice, and then …\nWrite the internal representation to a slice, and then …\nThe second <code>u16</code> is used for surrogate pairs.\nConverts an iterator of <code>Utf16Char</code> (or <code>&amp;Utf16Char</code>) to an …\nGet the UTF-16 representation of this codepoint.\nConvert this <code>char</code> to UTF-16.\nConvert this <code>char</code> to UTF-16. The second item is <code>Some</code> if a …\nDecodes bytes as UTF-16 and groups them into <code>Utf16Char</code>s\nGet the UTF-8 representation of this codepoint.\nConvert this char to an UTF-8 array, and also return how …\nDecodes bytes as UTF-8 and groups them into <code>Utf8Char</code>s\nWill you need an extra unit to complete this codepoint?\nEquivalent to <code>.char_indices()</code> but produces <code>Utf16Char</code>s.\nDecode <code>u16</code> slices as UTF-16 and iterate over the …\nEquivalent to <code>.chars()</code> but produces <code>Utf16Char</code>s.\nEquivalent to <code>.char_indices()</code> but produces <code>Utf8Char</code>s.\nDecode <code>u8</code> slices as UTF-8 and iterate over the codepoints …\nEquivalent to <code>.chars()</code> but produces <code>Utf8Char</code>s.\nError returned when an <code>u32</code> is not a valid unicode …\n<code>Utf8Char</code> and <code>Utf16Char</code> cannot be empty.\nThe slice is empty.\nError returned by <code>Utf8Char::from_str_start()</code> and …\nThe first element is a trailing / low surrogate, which is …\nThe first unit is a trailing / low surrogate, which is …\nThe first unit is a trailing surrogate.\nError returned when <code>Utf8Char::from_str()</code> or …\nA trailing surrogate was expected when the end was reached.\nThe byte at index 1..=3 should be a continuation byte, but …\nThe first and only unit requires a second unit.\nThe first and only unit requires a second unit.\n<code>Utf8Char</code> and <code>Utf16Char</code> cannot store more than a single …\nError returned by <code>Utf8Char::from_ascii()</code> for bytes that …\nError returned by <code>Utf16Char::from_bmp()</code> for units that are …\nA byte which is never used by well-formed UTF-8 was …\nThe encoding of the codepoint has so many leading zeroes …\nThe second element is needed, but is not a trailing …\nThe second unit is needed and was provided, but is not a …\nThe first unit requires a second one, but it’s not a …\nThe provided second unit is not necessary.\nThere are too few bytes to decode the codepoint.\nIt’s higher than the highest codepoint (which is …\nThe codepoint is higher than <code>\\u10ffff</code>, which is the …\nThe first byte is not a valid start of a codepoint.\nA trailing surrogate was not preceeded by a leading …\nA leading surrogate was followed by an unit that was not a …\nError returned when an <code>[u16; 2]</code> doesn’t form a valid …\nError returned by <code>U16UtfExt::utf16_needs_extra_unit()</code> when …\nError returned by <code>Utf16CharDecoder</code> when it encounters an …\nIt’s reserved for UTF-16 surrogate pairs.\nThe codepoint is reserved for UTF-16 surrogate pairs.\nError returned when a slice of <code>u16</code>s doesn’t start with …\nError returned when one or two <code>u16</code>s are not valid UTF-16.\nError returned when an invalid UTF-8 sequence is …\nThe types of errors that can occur when decoding a UTF-8 …\nGet the range of values for which this error would be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the type of error.\nAn <code>Utf16CharMerger</code> that also produces offsets and lengths, …\nAn iterator over the codepoints in a <code>str</code> represented as …\nDecodes UTF-16 characters from a <code>u16</code> iterator into …\nConverts an iterator of <code>Utf16Char</code> (or <code>&amp;Utf16Char</code>) to an …\nAn iterator over the codepoints in a <code>str</code> represented as …\nIterate over the units of the UTF-16 representation of a …\nAn <code>Utf8CharMerger</code> that also produces offsets and lengths, …\nAn iterator over the <code>Utf8Char</code> of a string slice, and their …\nDecodes UTF-8 characters from a byte iterator into <code>Utf8Char</code>…\nConverts an iterator of <code>Utf8Char</code> (or <code>&amp;Utf8Char</code>) to an …\nAn iterator over the codepoints in a <code>str</code> represented as …\nRead or iterate over the bytes of the UTF-8 representation …\nExtract the remainder of the source slice.\nExtract the remainder of the source slice.\nExtract the remainder of the source <code>str</code>.\nExtract the remainder of the source <code>str</code>.\nExtract the remainder of the source <code>str</code>.\nExtract the remainder of the source <code>str</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the source iterator.\nExtracts the source iterator.\nExtract the inner iterator.\nExtract the inner iterator.\nReturns an iterator over the remaining units. Unlike …\nAlways returns Ok\nAlways returns <code>Ok</code>")
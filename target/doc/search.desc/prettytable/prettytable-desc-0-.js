searchState.loadedDescShard("prettytable", 0, "A formatted and aligned table printer written in rust\nTrait implemented by types which can be sliced\nTerminal attributes for use with term.attr().\nConvenience attribute to set the background color\nBlink mode\nBold (or possibly bright) mode\nRepresent a table cell containing a string.\nIterator over immutable cells in a column\nIterator over mutable cells in a column\nDim mode, also called faint or half-bright. Often not …\nConvenience attribute to set the foreground color\nItalics mode. Often not supported\nType output after slicing\nReverse mode, inverts the foreground and background colors\nRepresent a table row made of cells\nSecure mode, also called invis mode. Hides the printed text\nTrait implemented by types which can be sliced\nStandout mode. Often implemented as Reverse, sometimes …\nAn owned printable table\nA borrowed immutable <code>Table</code> slice A <code>TableSlice</code> is obtained …\nUnderline mode\nAppend a <code>cell</code> at the end of the row\nAppend an empty row in the table. Return a mutable …\nAppend a row in the table, transferring ownership of this …\nSet text alignment in the cell\nGet a slice from self\nThis macro simplifies <code>Cell</code> creation\nTerminal color definitions\nReturn an iterator over the immutable cells of the column …\nReturns an iterator over the immutable cells of the column …\nReturn an iterator over the mutable cells of the column …\nCSV impl and reexported types\nReturn a cell initialized with a single empty <code>String</code>, with …\nCreate an row of length <code>size</code>, with empty strings stored\nDefine table formatting utilities\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a table from a CSV reader\nCreate a table from a CSV file\nCreate a table from a CSV string\nGet the cell at index <code>idx</code>\nReturn a copy of the full string contained in the cell\nGet a mutable reference to the internal format\nGet horizontal span of this cell (&gt; 0)\nGet the mutable cell at index <code>idx</code>\nGet a mutable reference to a row\nGet an immutable reference to a row\nGet an immutable reference to a row\nCreate a table initialized with <code>rows</code>\nInsert <code>cell</code> at position <code>index</code>. If <code>index</code> is higher than the …\nInsert <code>row</code> at the position <code>index</code>, and return a mutable …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the row is empty (has no cell)\nCheck if the table is empty\nCheck if the table slice is empty\nReturns an immutable iterator over cells\nReturns an mutable iterator over cells\nGet the number of cells in this row\nGet the number of rows\nGet the number of rows\nCreate a new <code>Cell</code> initialized with content from <code>string</code>. By …\nCreate a new <code>Row</code> backed with <code>cells</code> vector\nCreate an empty table\nCreate a new <code>Cell</code> initialized with content from <code>string</code>. …\nPrint the table to <code>out</code> and returns the number of lines …\nPrint the table to <code>out</code> and returns the number of line …\nPrint the cell in HTML format to <code>out</code>.\nPrint the row in HTML format to <code>out</code>.\nPrint table in HTML format to <code>out</code>.\nPrint table in HTML format to <code>out</code>.\nPrint the table to terminal <code>out</code>, applying styles when …\nPrint the table to terminal <code>out</code>, applying styles when …\nPrint the table to standard output. Colors won’t be …\nPrint the table to standard output. Colors won’t be …\nPrint the table to standard output. Colors won’t be …\nPrint the table to standard output. Colors won’t be …\nCreate a table with <code>table!</code> macro, print it to standard …\nRemove the cell at position <code>index</code>. Silently skip if this …\nRemove the row at position <code>index</code>. Silently skip if the row …\nRemove all style attributes and reset alignment to default …\nThis macro simplifies <code>Row</code> creation\nReturns an iterator over immutable rows\nReturns an iterator over immutable rows\nReturns an iterator over mutable rows\nSet the <code>cell</code> in the row at the given <code>idx</code> index\nModify a single element in the table\nChange the table format. Eg : Separators\nSet horizontal span for this cell (must be &gt; 0)\nSet the optional title lines\nGet a slice from self\nAdd a style attribute to the cell\nSet the cell’s style by applying the given specifier …\nCreate a table filled with some values\nWrite the table to the specified writer.\nWrite the table to the specified writer.\nWrite the table to the specified writer.\nWrite the table to the specified writer.\nUnset the title line\nAdd horizontal spanning to the cell\nAdd a style attribute to the cell. Can be chained\nNumber for a terminal color\nContains the error value\nContains the success value\nA already configured CSV reader.\nBuilds a CSV reader with various configuration knobs.\nA type alias for <code>Result&lt;T, csv::Error&gt;</code>.\nAn already configured CSV writer.\nA convenience method for specifying a configuration to …\nSet the capacity (in bytes) of the buffer used in the CSV …\nReturns a reference to the first row read by this parser …\nReturns a borrowed iterator over all records as raw bytes.\nThe comment character to use when parsing CSV.\nThe field delimiter to use when parsing CSV.\nReturns a borrowed iterator over deserialized records.\nEnable double quote escapes.\nThe escape character to use when parsing CSV.\nWhether the number of fields in records is allowed to …\nFlush the contents of the internal buffer to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a CSV parser from this configuration that reads data …\nCreate a new CSV parser with a default configuration for …\nBuild a CSV writer with a default configuration that …\nBuild a CSV parser from this configuration that reads data …\nCreate a new CSV parser with a default configuration for …\nBuild a CSV writer with a default configuration that …\nReturns a mutable reference to the underlying reader.\nReturns a reference to the underlying reader.\nReturn a reference to the underlying writer.\nWhether to treat the first row as a special header row.\nReturns true if and only if this reader has been …\nReturns a reference to the first row read by this parser.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an owned iterator over all records as raw bytes.\nReturns an owned iterator over deserialized records.\nUnwraps this CSV reader, returning the underlying reader.\nFlush the contents of the internal buffer and return the …\nReturns an owned iterator over all records as strings.\nReturns true if and only if this reader has been exhausted.\nCreate a new builder for configuring CSV parsing.\nReturn the current position of this CSV reader.\nThe quote character to use when parsing CSV.\nEnable or disable quoting.\nRead a single row into the given byte record. Returns …\nRead a single row into the given record. Returns false …\nReturns a borrowed iterator over all records as strings.\nSeeks the underlying reader to the position given.\nThis is like <code>seek</code>, but provides direct control over how …\nSerialize a single record using Serde.\nSet the headers of this CSV parser manually as raw bytes.\nSet the headers of this CSV parser manually.\nThe record terminator to use when parsing CSV.\nWhether fields are trimmed of leading and trailing …\nWrite a single <code>ByteRecord</code>.\nWrite a single field.\nWrite a single record.\nAlignment for cell’s content\nBottom table’s border\nAlign in the center\nPosition of a column separator in a row\nA builder to create a <code>TableFormat</code>\nLine separator between data rows\nInternal column separators\nAlign left\nLeft table’s border\nPosition of a line separator in a table\nContains the character used for printing a line separator\nAlign right\nRigth table’s border\nContains the table formatting rules\nLine separator between the titles row, and the first data …\nTable’s border on top\nSet the character used for table borders\nSet the character used for table borders\nReturn the generated <code>TableFormat</code>\nSet the character used for internal column separation\nSet the character used for internal column separation\nPredifined formats. Those constants are lazily evaluated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the character used to separate columns. <code>pos</code> …\nGet global indentation in spaces used when rendering a …\nReturn a tuple with left and right padding\nSet global indentation in spaces used when rendering a …\nSet global indentation in spaces used when rendering a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the character used for left table border\nSet the character used for left table border\nCreate a new line separator instance where <code>line</code> is the …\nCreate a new empty TableFormat.\nCreates a new builder\nSet left and right padding\nSet left and right padding\nSet the character used for right table border\nSet the character used for right table border\nSet a line separator\nSet a line separator format\nSet format for multiple kind of line separator\nSet separator format for multiple kind of line separators\nFormat for a table with only external borders and title …\nA table with borders and delimiters made with box …\nFormat for printing a table without any separators (only …\nDefault table format\nA table with no external border\nA table with no external border and no line separation\nNo column separator\nWith no line or title separator\nWith no line separator, but with title separator\nSimilar to <code>FORMAT_DEFAULT</code> but without special separator …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")